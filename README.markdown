# House Price Prediction Project

## Overview

This project implements a house price prediction system using the `Housing.csv` dataset. It employs multiple regression models—Linear Regression, Random Forest, Ridge, and XGBoost—to predict house prices based on features such as area, bedrooms, bathrooms, and categorical attributes like mainroad and furnishing status. The best-performing model is saved and deployed via a Flask web application, allowing users to input house features and receive price predictions. The project includes a virtual environment (`venv`) containing all necessary dependencies for easy setup.

## Features

- **Dataset**: `Housing.csv` with 545 entries, including numerical features (`area`, `bedrooms`, `bathrooms`, `stories`, `parking`) and categorical features (`mainroad`, `guestroom`, `basement`, `hotwaterheating`, `airconditioning`, `prefarea`, `furnishingstatus`).
- **Preprocessing**:
  - Outlier removal using IQR for `price` and 96th percentile capping for numerical features.
  - Feature engineering: `area_per_bedroom` (area divided by bedrooms) and `total_rooms` (bedrooms + bathrooms).
  - Log transformation of the target variable (`price`) to handle skewness.
  - Ordinal encoding for categorical features, with ordered categories for `furnishingstatus` (`unfurnished=0`, `semi-furnished=1`, `furnished=2`) and binary encoding for others (`no=0`, `yes=1`).
  - Standardization of numerical features using `StandardScaler`.
- **Models**: Linear Regression, Random Forest, Ridge, and XGBoost, with hyperparameter tuning for Random Forest, Ridge, and XGBoost using `RandomizedSearchCV`.
- **Evaluation**: Models are evaluated using R², MAE, MSE, and RMSE, with cross-validation scores for robustness.
- **Deployment**: A Flask web app (`online.py`) with a user interface (`index.html`, `result.html`) for inputting house features and displaying predictions.
- **Visualization**: Scatter plot of actual vs. predicted prices for the XGBoost model.
- **Virtual Environment**: A `venv` folder with all required dependencies pre-installed.

## Project Structure

- **Housing.csv**: Dataset containing house features and prices.
- **app.py**: Main script for data preprocessing, feature engineering, model training, tuning, evaluation, and saving the best model to `best_model.pkl`.
- **online.py**: Flask application for deploying the model and serving predictions via a web interface.
- **index.html**: HTML form for inputting house features.
- **result.html**: HTML template to display the predicted house price.
- **best_model.pkl**: Saved best-performing model (generated by `app.py`).
- **venv/**: Virtual environment folder containing all necessary Python packages.
- **README.md**: This file, providing project documentation.

## Requirements

The project uses a virtual environment (`venv`) with all dependencies pre-installed. The required Python packages are:

- `pandas`
- `numpy`
- `matplotlib`
- `scikit-learn`
- `xgboost`
- `flask`

These are already included in the `venv` folder, so no additional installations are needed if using the provided virtual environment.

## Setup Instructions

1. **Clone the Repository**:
   ```bash
   git clone <repository-url>
   cd <repository-directory>
   ```
2. **Activate the Virtual Environment**:
   - The `venv` folder contains all necessary dependencies. Activate it based on your operating system:
     - **Windows**:
       ```bash
       .\venv\Scripts\activate
       ```
     - **macOS/Linux**:
       ```bash
       source venv/bin/activate
       ```
   - After activation, your terminal should show `(venv)` to indicate the virtual environment is active.
3. **Verify Dependencies**:
   - With the virtual environment activated, all required packages (`pandas`, `numpy`, `matplotlib`, `scikit-learn`, `xgboost`, `flask`) are available.
   - To confirm, run:
     ```bash
     pip list
     ```
4. **Ensure `Housing.csv` is Present**: Place the `Housing.csv` file in the project directory.
5. **Train the Model**:
   - Run `app.py` to preprocess the data, train models, and save the best model to `best_model.pkl`:
     ```bash
     python app.py
     ```
   - This generates `best_model.pkl` after evaluating Linear Regression, Random Forest, Ridge, and XGBoost.
6. **Run the Flask App**:
   - Ensure `best_model.pkl`, `index.html`, and `result.html` are in the project directory.
   - Run `online.py` to start the Flask server:
     ```bash
     python online.py
     ```
   - Open a browser and navigate to `http://127.0.0.1:5000` to access the web interface.
7. **Directory Structure**:
   ```
   house-price-prediction/
   ├── Housing.csv
   ├── app.py
   ├── online.py
   ├── best_model.pkl
   ├── templates/
   │   ├── index.html
   │   └── result.html
   ├── venv/
   │   ├── (virtual environment files)
   ├── README.md
   ```

## Usage

1. **Training**:
   - Activate the virtual environment:
     ```bash
     source venv/bin/activate  # macOS/Linux
     .\venv\Scripts\activate   # Windows
     ```
   - Execute `app.py` to preprocess the dataset, train models, and save the best model:
     ```bash
     python app.py
     ```
   - Outputs include evaluation metrics (R², MAE, MSE, RMSE) for each model and cross-validation scores.
   - A scatter plot of actual vs. predicted prices (XGBoost) is displayed.
2. **Prediction**:
   - With the virtual environment activated, run `online.py` to start the Flask app:
     ```bash
     python online.py
     ```
   - Access `http://127.0.0.1:5000` in a browser.
   - Enter house details in the form (e.g., area, bedrooms, mainroad status).
   - Submit to view the predicted price in `result.html`.
3. **Input Fields** (matching `Housing.csv`):
   - **Numerical**: Area (sqft), Bedrooms, Bathrooms, Stories, Parking
   - **Categorical**: Main Road (Yes/No), Guest Room (Yes/No), Basement (Yes/No), Hot Water Heating (Yes/No), Air Conditioning (Yes/No), Preferred Area (Yes/No), Furnishing Status (Furnished/Semi-Furnished/Unfurnished)

## Model Details

- **Preprocessing**:
  - Outliers removed for `price` (IQR method) and numerical features (95th percentile).
  - New features: `area_per_bedroom` and `total_rooms`.
  - Categorical features encoded using `OrdinalEncoder` with predefined categories.
  - Numerical features scaled using `StandardScaler`.
- **Models**:
  - **Linear Regression**: Simple linear model, no hyperparameter tuning.
  - **Random Forest**: Ensemble model with tuned parameters (`n_estimators`, `max_depth`, `min_samples_split`, `min_samples_leaf`).
  - **Ridge**: Linear model with L2 regularization, tuned `alpha`.
  - **XGBoost**: Gradient boosting model with tuned parameters (`n_estimators`, `learning_rate`, `max_depth`, `subsample`, `colsample_bytree`, `reg_lambda`, `reg_alpha`).
- **Evaluation Metrics**:
  - R²: Proportion of variance explained.
  - MAE: Mean absolute error (in ₹).
  - MSE: Mean squared error (in ₹²).
  - RMSE: Root mean squared error (in ₹).
- **Best Model**: The model with the highest R² score is saved as `best_model.pkl`.

## Example

1. Activate the virtual environment and run `app.py` to train models and generate `best_model.pkl`.
2. Start the Flask app with `python online.py`.
3. Open `http://127.0.0.1:5000` and input:
   - Area: 6000 sqft
   - Bedrooms: 3
   - Bathrooms: 2
   - Stories: 2
   - Main Road: Yes
   - Guest Room: No
   - Basement: Yes
   - Hot Water Heating: No
   - Air Conditioning: Yes
   - Parking: 1
   - Preferred Area: Yes
   - Furnishing Status: Semi-Furnished
4. Submit to view the predicted price, e.g., "The predicted house price is: ₹5,750,000.00".

## Troubleshooting

- **Virtual Environment Issues**: If the `venv` folder is missing or corrupted, recreate it:
  ```bash
  python -m venv venv
  source venv/bin/activate  # macOS/Linux
  .\venv\Scripts\activate   # Windows
  pip install pandas numpy matplotlib scikit-learn xgboost flask
  ```
- **FileNotFoundError**: Ensure `Housing.csv`, `best_model.pkl`, and `templates/` folder with `index.html` and `result.html` are in the project directory.
- **Port Conflict**: If port 5000 is in use, modify `online.py` to use a different port (e.g., `app.run(debug=True, port=5001)`).
